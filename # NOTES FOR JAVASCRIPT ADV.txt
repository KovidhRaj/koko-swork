# NOTES FOR JAVASCRIPT FULL AND ADVANCED #

1) VARIABLES

NOTE: JAVASCRIPT IS PROGRAMMING LANGUAGE THAT ALLOWS TO CHANGE ANY DATA TYPE DURING
RUN TIME AND SUCH LANGUAGES ARE CALLED OR SAID TO BE DYNAMICALLY TYPED PROGRAMING LANGUAGE.

let a = 90;
console.log(a);
a = "kovidhraj";
console.log(a);


var a = 99; // BECAUSE OF VAR THIS WILL THROW AN ERROR AS THIS ONE IS DEDICATED TO GIVE ONLY 
INTEGER VALUE TO THE VARIABLE "a" HENCE THROWS THE ERROR.

console.log(a);
let a = 90;
console.log(a);
a = "kovidhraj";
console.log(a);

2) VAR, LET AND CONST USED IN JAVASCRIPT !!! 


var a = 90;
var b = "kovidh";
// YOU CAN EITHER PUT IT WITH LET OR VAR BUT IT WILL GIVE OUTPUT AS

GOOD
KOVIDH

{
    let b = "good";
    console.log(b);
}

console.log(b);

// BUT THIS PART WILL THROW AN ERROR

var a = 90;
const b = "kovidh";

{
    var b = "good";
    console.log(b);
}

console.log(b);

// VAR CAN BE RE-DECLARED WHILE LET OR CONST CANNOT BE RE-DECLARED 

//
var is globally scoped while let and const are block scoped.

var can be updated & re-declared within its scope.

let can be updated but not re-declared.

const can neither be updated nor be re-declared.

var variables are initialized with undefined whereas let and const variables are not initialized.

const must be initialized during declaration unlike let and var.

//

3) PRIMITIVES AND OBJECTS IN JAVASCRIPTS

These are 7 primitive datatypes in JavaScript:

Null
Number
String
Symbol
Undefined
Boolean
BigInt

// nn bb ss u

let a = null;
let b = 345;
let c = true;
let d = BigInt("442") + BigInt("3");
let e = "Kovidh";
let f = Symbol("i am ironman");

console.log(a,b,c,d,e,f);

console.log(typeof a);

// OBJECTS IN JAVASCRIPT 



const item = {
    "Kovidh": true,
    "gauri": false,
    "Lovish": 67,
    "tina": undefined
}
console.log(item["Kovidh"]);
console.log(item["gauri"]);
console.log(item["tina"]);
console.log(item["Lovish"]);


const a = {

    name:"Kovidh",
    age: 20
}
// a = 90;

a['friend'] = "mohit";
a['friend2'] = "neil";

console.log(a);

4) EXPRESSIONS AND OPERATORS

## OPERATORS ##

a) ARITHMETIC OPERATORS


let a = 90;
let b = 2;

console.log("a + b =", a + b);
console.log("a - b =",a-b);
console.log("a * b =",a*b);
console.log("a / b =",a/b);
console.log("a ** b =",a**b);
console.log("a % b =", a%b);

post increment and pre increment

console.log("a++:",a++);
console.log("a:",a);

console.log("++a:",++a);
console.log("a:",a);

post decrement and pre decrement

console.log("a--:",a--);
console.log("a:",a);

console.log("--a:",--a);
console.log("a:",a);

b) ASSIGMENT OPERATOR

=

x=y

+=

x=x+y

-=

x=x-y

*=

x=x*y

/=

x=x/y

%=

x=x%y

**=

x=x**y

c) COMPARISON OPERATORS

a = 8;
b = 6;

console.log("a == b is",a == b);
console.log("a != b is",a != b);
console.log("a === b is",a === b);
console.log("a !== b is",a !== b);
console.log("a >= b is",a >= b);
console.log("a <= b is",a <= b);
console.log("a < b is",a < b);
console.log("a > b is",a > b);


==

Equal to

!=

Not equal

===

Equal value and type

!==

Not equal value or not equal type

> 

Greater than

< 

Less than

>=

Greater than or equal to

<=

Less than or equal to

?

Ternary operator

5) CONDITIONAL OPERATORS IN JAVASCRIPT

let a = prompt("what is your age?")
if(a > 20){
    alert("great you can drive");
}
else{
    alert("no you can not drive!!");
}


if (condition){
  // block of code if condition true
 }
else {
  // block of code if Condition false
}


if (age>0){
  console.log(“A valid age”);
}
else if (age>10 && age<15){
  console.log(“but you are a kid”);
}
else if (age>18){
  console.log(“Not a kid”);
else{
  console.log(“Invalid Age”);
}


## Javascript ternary operator ## 
Evaluates a condition and executes a block of code based on the condition.

Condition ? exp1 : exp2

Example syntax of ternary operator looks like this:

(marks >10) ? ‘Yes’ : ’No’ 
// if marks are greater than 10, you are passed else not

// HOMEWORK IS TO EXPLORE THE SWITCH CASE IN JAVASCRIPT

switch (expression) {
    case value1:
        // Code to execute if expression === value1
        break;
    case value2:
        // Code to execute if expression === value2
        break;
    // Add more cases as needed
    default:
        // Code to execute if none of the above cases match
}


6) FOR LOOPS IN JAVASCRIPT

let a = 5;

for(let i = 0;i < 10;i++){
    console.log("a x i = ",a*i);
}


let sum = 0;
let n = prompt("enter the number");
for(let i=0;i<n;i++){
    sum += (i+1);
}
console.log("sum of first "+ n +" natural number is "+ sum);


let marks = {
    kovidh:79,
    Raja:40,
    Mohit:80,
    Neil:77
}
for(let i=0;i<Object.keys(marks);i++){
    console.log("the marks of " + Object.keys(marks)[i] +"are" + marks[Object.keys(marks)[i]])
}


 ## The for-in loop ##

The syntax of for-in loop looks like this:

for (key in object){
//code to be executed
}

let marks = {
    kovidh:79,
    Raja:40,
    Mohit:80,
    Neil:77
}
for(let i in marks){
        console.log(i);
}


 ## The for-of loop ##

The syntax of for-of loop looks like this,

for (variable of iterable){
//code
}
// Iterable data structure like arrays, strings, etc.

7) WHILE LOOPS IN JAVASCRIPT

let a = 5;
let i = 3;
while(i < a){
    console.log(i);
    i++;
}

 ## DO WHILE LOOPS ##
let a = 7;
let i = 0;
do{
    console.log(i);
    i++;
}
while(i < a);

8) FUNCTIONS IN JAVASCRIPT

function addAvg(x,y){
    return 1 + (x+y)/2;
}

let a = 4;
let b = 2;
let c = 6;

console.log("average plus one have a value of ",addAvg(a,b));
console.log("average plus one have a value of ",addAvg(b,c));
console.log("average plus one have a value of ",addAvg(c,a));


Function invocation is a way to use the code inside the function. 

A function can also return a value. The value is returned back to the caller.

const sum = (a,b) => {
let c = a+b;
return c;    // returns the sum
}

// Above way or method can also be used to create and use the function

let y = sum(1,3);
consolge.log(y);    // prints 4

9) STRINGS IN JAVASCRIPT


let name = "Kovidhraj"
console.log(name);
console.log(typeof name);
console.log(name.length);


let boy1 = "kovidhraj";
let boy2 = "Neil";

let sentence = `${boy1} is friend of ${boy2}`
console.log(sentence);

NOTE:	
## Template literals use backticks instead of quotes to define a string. ##

## ESCAPE SEQUENCE ##
If you try to print the following string, JavaScript will misunderstand it 

let name = ‘Adam D’ Angelo’
We can use single quote escape sequence to solve the problem,

let name = ‘Adam D\’ Angelo’


1. length method
let name = “Harry”
name.length     // prints 5
 

2. toUpperCase() method
let name = “Harry”
name.toUpperCase()    // prints HARRY
 

3. toLowerCase() method
let name = “Harry”
name.toLowerCase()    // prints harry
 

4. slice method
let name = “Harry”
name.slice (2,4)    // prints rr (from 2 to 4, 4 not included)

//Indexing starts from 0, so H is 0, a is 1 and so on.
 

let name = “Harry”
name.slice(2)        // prints rry (from 2 to end)
 

5. replace method
let name = “Harry Bhai”
let newName = name.replace(“Bhai”, “Bhau”)
 

6. concat method
let name1 = “Harry”
let name2 = “Naman”
let name3 = name1.concat(name2, “Yes”)
// We can even use + operator for concatenation
 

7. trim method
let name = “      Harry     ”
let newName = name.trim()    // Removes whitespaces
 

Strings are immutable. In order to access the character at an index we use the following syntax,

let name = “Harry”
name[0]    // Prints H
name[1]    // Prints a


10) ARRAYS in JAVASCRIPT

Arrays are variables which can hold more than one value.

const fruits = [“banana”, “apple”, “grapes”]
const a1 = [7,”Harry”,false]    //can hold different type of data
 

Accessing Values
let numbers = [1,2,7,9]
numbers[0] – 1
numbers[1] – 2
 

Finding the length
let numbers = [1,7,9,21]
//Indexing start from 0, so 1 has 0 index value and 7 has 1 index value and so on.

numbers[0] - 1
numbers.length – 4
 

Changing the values
let numbers = [7,2,40,9]
numbers[2] = 8
// “numbers” now becomes [7,2,8,9]
 

 

Arrays are mutable
Array can be changed
In JavaScript, arrays are objects. The typeof operator on arrays returns object.
Const n = [1,7,9]
typeof n     // returns object

// Arrays can hold many values under a single name.


There are some important array methods in JavaScript. Some of them are as follows:

 

1. toString() - Converts an array to a string of comma separated values.
let n = [1,7,9]
n.toString()     // 1,7,9
 

2. join() – joins all the array elements using a separator.
let n = [7,9,13]
n.join(“ ”)    // 7-9-13
 

3. pop() – removes last element from the array.
let n = [1,2,4]
n.pop()        // updates the original array and returns the popped value
 

4. push() – Adds a new element at the end of the array.
let a = [7,1,2,8]
a.push(9)    // modifies the original array and returns the new array length
 

5. shift() – Removes first element and returns it.

6. unshift() – Adds element to the beginning. Returns new array length.

7. delete – Array elements can be deleted using the delete operator.
let d = [7,8,9,10]
delete d[1]    // delete is an operator
 

8. concat() – used to join array to the given array.
let a1 = [1,2,3]
let a2 = [4,5,6]
let a3 = [9,8,7]
a1.concat(a2,a3)    // Returns [1,2,3,4,5,6,9,8,7]
// concat returns a new array and does not change the existing arrays
 

9. sort() – sort() method is used to sort an array alphabetically.
let a = [7,9,8]
a.sort()        // a changes to [7,8,9] – sort method modifies the original array
sort() takes an optional compare function. If this function is provided as the first argument, the sort() function will consider these values (the values returned from the compare function) as the basis of sorting.

 

10. splice() – splice can be used to add new items to an array.
const numbers = [1,2,3,4,5]
numbers.splice(2,1,23,24)
//here, 2 is the position to add, 1 depicts the no. of elements to remove, and 23, 24 are the elements of be added.
splice method returns deleted items, and modifies the array.

 

11. slice() – slices out a piece from an array. It creates a new array.
const num = [1,2,3,4]
num.slice(2)        // [3,4]
num.slice(1,3)        // [2,3]
 

12. reverse() – Reverses the elements in the source array.


Arrays can be looped through using the classical JavaScript for loop or through some other methods discusses below.

 

1. forEach loop – calls a function, once for each array element.
const a = [1,2,3]
a.forEach((value,index,array) => {
    // function logic
});
 

2. Array.from – used to create an array from any other object.
Array.from(“Harry”)
 

3. for … of – for-of loop can be used to get the values from an array.
4. for … in – for-in loop can be used to get the keys from an array.


Map, Filter & Reduce in JavaScript

1. map() – creates a new array by performing some operation on each array element.
const a = [1,2,3]
a.map((value, index, array) => {
    return value*value;
})
 

2. filter() – Filters an array with values that passes a test. Creates a new array.
const a = [1,2,3,4,5]
a.filter(greater_than_5)
 

3. reduce method – Reduces an array to a single value.
const n = [1,8,7,11]
let sum = numbers.reduce(add)
// add is a function, so sum will get the sum of 1+8+7+11
# GUESS THE NUMBER GAME BY JAVASCRIPT

function randomNum(min,max){
    return Math.floor(Math.random()*(max - min + 1)) + min;
}
let num = parseInt(prompt("enter the number to be guessed between 1 to 100"),10);
let chances = 0;
let randomnumbers = randomNum(1,100);
while(num !== randomnumbers){
    if(num < randomnumbers){
        console.log("very low ranged try something new");
    }
    else if(num > randomnumbers){
        console.log("very high ranged try to keep it low");
    }
    chances++;
    num = parseInt(prompt("Enter another number"),10);
}
console.log(`You have guessed the correct number: ${randomnumbers}`);
console.log(`It took you ${chances} attempts`);


JavaScript in the Browser


JavaScript was initially created to make web pages alive. JS can be written right in a web page’s HTML to make it interactive.

The browser has an embedded engine called the JavaScript engine or the JavaScript runtime.

 

JavaScript’s ability in the browser is very limited to protect the user’s safety. For example, a webpage on http://google.com cannot access http://codeswear.com and steal information from there.

 

Developer tools
Every browser has some developer tasks which makes a developer’s life a lot easier.

F12 on chrome opens Dev tools.

 

Elements (All HTML Elements)

Console (All the errors + logs)

Network (All network requests)
 

 

We can also write JavaScript commands in the console.

12) JavaScript Script Tag

The script tag is used to insert JS into an HTML page.

The script tag can be used to insert external or internal scripts,

<script>
	alert(“Hello”)
</script>
// or…
<script src = “/Js/file.js”> </script>
 

The benefit of a separate JS file is that the browser will download it and store it in its cache.

13) JavaScript Console Object

The console object has several methods, log being one of them. Some of them are as follows:

assert() – used to assert a condition
clear() – clears the console
log() – outputs a message to the console
table() – Displays a tabular data
warn() – used for warnings
error() – used for errors
info() – used for special information
 

You will naturally remember some or all of these with time.

Comprehensive list can be looked up on MDN

13) JavaScript alert, prompt & confirm

alert: Used to invoke a mini window with a msg.

alert("hello")
 

prompt: Used to take user input as string.

inp = prompt("Hi", "No")
// Here No is the optional default value
 

confirm: Shows a message and waits for the user to press ok or cancel. Returns true for ok and false for cancel.

 

The exact location and look is determined by the browser which is a limitation.

14) DOM, BOM & Window Object

We have the following when JavaScript runs in a browser,

Window:

DOM
BOM
JavaScript Core
 

Window object represents browser window and provides methods to control it. It is a global object.

 

Document Object Model (DOM)
DOM represents the page content as HTML.

document.body    // Page body as JS Object

document.body.style.background="green"    
//It changes page background to green
 

Browser Object Model (BOM)
The Browser Object Model (BOM) represents additional objects provided by the browser (host environment) for working with everything except the document.

The functions alert/confirm/prompt are also a part of the BOM

location.href = "https://codewithharry.com"    // Redirect to another URL